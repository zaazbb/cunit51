C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE TESTRUN
OBJECT MODULE PLACED IN .\Objects\TestRun.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE ..\..\CUnit-2.1-3\CUnit\Sources\Framework\TestRun.c LARGE OPTIMIZE(8,SPE
                    -ED) BROWSE INCDIR(..\..\CUnit-2.1-3\CUnit\Headers;..\..\CUnit-2.1-3\Examples;..\..\src\inc) DEFINE(stdout=0,stderr=0,FIL
                    -E=char,fprintf=printf,setvbuf,_IONBF=0,exit,EXIT_FAILURE=0,snprintf=sprintf) DEBUG OBJECTEXTEND PRINT(.\Listings\TestRun
                    -.lst) OBJECT(.\Objects\TestRun.obj)

line level    source

   1          /*
   2           *  CUnit - A Unit testing framework library for C.
   3           *  Copyright (C) 2001       Anil Kumar
   4           *  Copyright (C) 2004-2006  Anil Kumar, Jerry St.Clair
   5           *
   6           *  This library is free software; you can redistribute it and/or
   7           *  modify it under the terms of the GNU Library General Public
   8           *  License as published by the Free Software Foundation; either
   9           *  version 2 of the License, or (at your option) any later version.
  10           *
  11           *  This library is distributed in the hope that it will be useful,
  12           *  but WITHOUT ANY WARRANTY; without even the implied warranty of
  13           *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  14           *  Library General Public License for more details.
  15           *
  16           *  You should have received a copy of the GNU Library General Public
  17           *  License along with this library; if not, write to the Free Software
  18           *  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
  19           */
  20          
  21          /*
  22           *  Implementation of Test Run Interface.
  23           *
  24           *  Aug 2001      Initial implementaion (AK)
  25           *
  26           *  19/Aug/2001   Added initial registry/Suite/test framework implementation. (AK)
  27           *
  28           *  24/Aug/2001   Changed Data structure from SLL to DLL for all linked lists. (AK)
  29           *
  30           *  25/Nov/2001   Added notification for Suite Initialization failure condition. (AK)
  31           *
  32           *  5-Aug-2004    New interface, doxygen comments, moved add_failure on suite
  33           *                initialization so called even if a callback is not registered,
  34           *                moved CU_assertImplementation into TestRun.c, consolidated
  35           *                all run summary info out of CU_TestRegistry into TestRun.c,
  36           *                revised counting and reporting of run stats to cleanly
  37           *                differentiate suite, test, and assertion failures. (JDS)
  38           *
  39           *  1-Sep-2004    Modified CU_assertImplementation() and run_single_test() for
  40           *                setjmp/longjmp mechanism of aborting test runs, add asserts in
  41           *                CU_assertImplementation() to trap use outside a registered
  42           *                test function during an active test run. (JDS)
  43           *
  44           *  22-Sep-2004   Initial implementation of internal unit tests, added nFailureRecords
  45           *                to CU_Run_Summary, added CU_get_n_failure_records(), removed
  46           *                requirement for registry to be initialized in order to run
  47           *                CU_run_suite() and CU_run_test(). (JDS)
  48           *
  49           *  30-Apr-2005   Added callback for suite cleanup function failure,
  50           *                updated unit tests. (JDS)
  51           *
  52           *  23-Apr-2006   Added testing for suite/test deactivation, changing functions.
C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 2   

  53           *                Moved doxygen comments for public functions into header.
  54           *                Added type marker to CU_FailureRecord.
  55           *                Added support for tracking inactive suites/tests. (JDS)
  56           *
  57           *  02-May-2006   Added internationalization hooks.  (JDS)
  58           *
  59           *  02-Jun-2006   Added support for elapsed time.  Added handlers for suite
  60           *                start and complete events.  Reworked test run routines to
  61           *                better support these features, suite/test activation. (JDS)
  62           *
  63           *  16-Avr-2007   Added setup and teardown functions. (CJN)
  64           *
  65           */
  66          
  67          /** @file
  68           *  Test run management functions (implementation).
  69           */
  70          /** @addtogroup Framework
  71           @{
  72          */
  73          
  74          #include <stdlib.h>
  75          #include <string.h>
  76          #include <assert.h>
  77          #include <stdio.h>
  78          #include <setjmp.h>
  79          #include <time.h>
  80          
  81          #include "CUnit.h"
  82          #include "MyMem.h"
  83          #include "TestDB.h"
  84          #include "TestRun.h"
  85          #include "Util.h"
  86          #include "CUnit_intl.h"
  87          
  88          /*=================================================================
  89           *  Global/Static Definitions
  90           *=================================================================*/
  91          static CU_BOOL   f_bTestIsRunning = CU_FALSE; /**< Flag for whether a test run is in progress */
  92          static CU_pSuite f_pCurSuite = NULL;          /**< Pointer to the suite currently being run. */
  93          static CU_pTest  f_pCurTest  = NULL;          /**< Pointer to the test currently being run. */
  94          
  95          /** CU_RunSummary to hold results of each test run. */
  96          static CU_RunSummary f_run_summary = {"", 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  97          
  98          /** CU_pFailureRecord to hold head of failure record list of each test run. */
  99          static CU_pFailureRecord f_failure_list = NULL;
 100          
 101          /** CU_pFailureRecord to hold head of failure record list of each test run. */
 102          static CU_pFailureRecord f_last_failure = NULL;
 103          
 104          /** Flag for whether inactive suites/tests are treated as failures. */
 105          static CU_BOOL f_failure_on_inactive = CU_TRUE;
 106          
 107          /** Variable for storage of start time for test run. */
 108          static clock_t f_start_time;
 109          
 110          
 111          /** Pointer to the function to be called before running a suite. */
 112          static CU_SuiteStartMessageHandler          f_pSuiteStartMessageHandler = NULL;
 113          
 114          /** Pointer to the function to be called before running a test. */
C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 3   

 115          static CU_TestStartMessageHandler           f_pTestStartMessageHandler = NULL;
 116          
 117          /** Pointer to the function to be called after running a test. */
 118          static CU_TestCompleteMessageHandler        f_pTestCompleteMessageHandler = NULL;
 119          
 120          /** Pointer to the function to be called after running a suite. */
 121          static CU_SuiteCompleteMessageHandler       f_pSuiteCompleteMessageHandler = NULL;
 122          
 123          /** Pointer to the function to be called when all tests have been run. */
 124          static CU_AllTestsCompleteMessageHandler    f_pAllTestsCompleteMessageHandler = NULL;
 125          
 126          /** Pointer to the function to be called if a suite initialization function returns an error. */
 127          static CU_SuiteInitFailureMessageHandler    f_pSuiteInitFailureMessageHandler = NULL;
 128          
 129          /** Pointer to the function to be called if a suite cleanup function returns an error. */
 130          static CU_SuiteCleanupFailureMessageHandler f_pSuiteCleanupFailureMessageHandler = NULL;
 131          
 132          /*=================================================================
 133           * Private function forward declarations
 134           *=================================================================*/
 135          static void         clear_previous_results(CU_pRunSummary pRunSummary, CU_pFailureRecord* ppFailure);
 136          static void         cleanup_failure_list(CU_pFailureRecord* ppFailure);
 137          static CU_ErrorCode run_single_suite(CU_pSuite pSuite, CU_pRunSummary pRunSummary);
 138          static CU_ErrorCode run_single_test(CU_pTest pTest, CU_pRunSummary pRunSummary);
 139          static void         add_failure(CU_pFailureRecord* ppFailure,
 140                                          CU_pRunSummary pRunSummary,
 141                                          CU_FailureType type,
 142                                          unsigned int uiLineNumber,
 143                                          const char *szCondition,
 144                                          const char *szFileName,
 145                                          CU_pSuite pSuite,
 146                                          CU_pTest pTest);
 147          
 148          /*=================================================================
 149           *  Public Interface functions
 150           *=================================================================*/
 151          CU_BOOL CU_assertImplementation(CU_BOOL bValue,
 152                                          unsigned int uiLine,
 153                                          const char *strCondition,
 154                                          const char *strFile,
 155                                          const char *strFunction,
 156                                          CU_BOOL bFatal)
 157          {
 158   1        /* not used in current implementation - stop compiler warning */
 159   1        CU_UNREFERENCED_PARAMETER(strFunction);
*** WARNING C275 IN LINE 159 OF ..\..\CUnit-2.1-3\CUnit\Sources\Framework\TestRun.c: expression with possibly no effect
 160   1      
 161   1        /* these should always be non-NULL (i.e. a test run is in progress) */
 162   1        assert(NULL != f_pCurSuite);
 163   1        assert(NULL != f_pCurTest);
 164   1      
 165   1        ++f_run_summary.nAsserts;
 166   1        if (CU_FALSE == bValue) {
 167   2          ++f_run_summary.nAssertsFailed;
 168   2          add_failure(&f_failure_list, &f_run_summary, CUF_AssertFailed,
 169   2                      uiLine, strCondition, strFile, f_pCurSuite, f_pCurTest);
 170   2      
 171   2          if ((CU_TRUE == bFatal) && (NULL != f_pCurTest->pJumpBuf)) {
 172   3            longjmp(*(f_pCurTest->pJumpBuf), 1);
 173   3          }
 174   2        }
 175   1      
C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 4   

 176   1        return bValue;
 177   1      }
 178          
 179          /*------------------------------------------------------------------------*/
 180          void CU_set_suite_start_handler(CU_SuiteStartMessageHandler pSuiteStartHandler)
 181          {
 182   1        f_pSuiteStartMessageHandler = pSuiteStartHandler;
 183   1      }
 184          
 185          /*------------------------------------------------------------------------*/
 186          void CU_set_test_start_handler(CU_TestStartMessageHandler pTestStartHandler)
 187          {
 188   1        f_pTestStartMessageHandler = pTestStartHandler;
 189   1      }
 190          
 191          /*------------------------------------------------------------------------*/
 192          void CU_set_test_complete_handler(CU_TestCompleteMessageHandler pTestCompleteHandler)
 193          {
 194   1        f_pTestCompleteMessageHandler = pTestCompleteHandler;
 195   1      }
 196          
 197          /*------------------------------------------------------------------------*/
 198          void CU_set_suite_complete_handler(CU_SuiteCompleteMessageHandler pSuiteCompleteHandler)
 199          {
 200   1        f_pSuiteCompleteMessageHandler = pSuiteCompleteHandler;
 201   1      }
 202          
 203          /*------------------------------------------------------------------------*/
 204          void CU_set_all_test_complete_handler(CU_AllTestsCompleteMessageHandler pAllTestsCompleteHandler)
 205          {
 206   1        f_pAllTestsCompleteMessageHandler = pAllTestsCompleteHandler;
 207   1      }
 208          
 209          /*------------------------------------------------------------------------*/
 210          void CU_set_suite_init_failure_handler(CU_SuiteInitFailureMessageHandler pSuiteInitFailureHandler)
 211          {
 212   1        f_pSuiteInitFailureMessageHandler = pSuiteInitFailureHandler;
 213   1      }
 214          
 215          /*------------------------------------------------------------------------*/
 216          void CU_set_suite_cleanup_failure_handler(CU_SuiteCleanupFailureMessageHandler pSuiteCleanupFailureHandler
             -)
 217          {
 218   1        f_pSuiteCleanupFailureMessageHandler = pSuiteCleanupFailureHandler;
 219   1      }
 220          
 221          /*------------------------------------------------------------------------*/
 222          CU_SuiteStartMessageHandler CU_get_suite_start_handler(void)
 223          {
 224   1        return f_pSuiteStartMessageHandler;
 225   1      }
 226          
 227          /*------------------------------------------------------------------------*/
 228          CU_TestStartMessageHandler CU_get_test_start_handler(void)
 229          {
 230   1        return f_pTestStartMessageHandler;
 231   1      }
 232          
 233          /*------------------------------------------------------------------------*/
 234          CU_TestCompleteMessageHandler CU_get_test_complete_handler(void)
 235          {
 236   1        return f_pTestCompleteMessageHandler;
C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 5   

 237   1      }
 238          
 239          /*------------------------------------------------------------------------*/
 240          CU_SuiteCompleteMessageHandler CU_get_suite_complete_handler(void)
 241          {
 242   1        return f_pSuiteCompleteMessageHandler;
 243   1      }
 244          
 245          /*------------------------------------------------------------------------*/
 246          CU_AllTestsCompleteMessageHandler CU_get_all_test_complete_handler(void)
 247          {
 248   1        return f_pAllTestsCompleteMessageHandler;
 249   1      }
 250          
 251          /*------------------------------------------------------------------------*/
 252          CU_SuiteInitFailureMessageHandler CU_get_suite_init_failure_handler(void)
 253          {
 254   1        return f_pSuiteInitFailureMessageHandler;
 255   1      }
 256          
 257          /*------------------------------------------------------------------------*/
 258          CU_SuiteCleanupFailureMessageHandler CU_get_suite_cleanup_failure_handler(void)
 259          {
 260   1        return f_pSuiteCleanupFailureMessageHandler;
 261   1      }
 262          
 263          /*------------------------------------------------------------------------*/
 264          unsigned int CU_get_number_of_suites_run(void)
 265          {
 266   1        return f_run_summary.nSuitesRun;
 267   1      }
 268          
 269          /*------------------------------------------------------------------------*/
 270          unsigned int CU_get_number_of_suites_failed(void)
 271          {
 272   1        return f_run_summary.nSuitesFailed;
 273   1      }
 274          
 275          /*------------------------------------------------------------------------*/
 276          unsigned int CU_get_number_of_suites_inactive(void)
 277          {
 278   1        return f_run_summary.nSuitesInactive;
 279   1      }
 280          
 281          /*------------------------------------------------------------------------*/
 282          unsigned int CU_get_number_of_tests_run(void)
 283          {
 284   1        return f_run_summary.nTestsRun;
 285   1      }
 286          
 287          /*------------------------------------------------------------------------*/
 288          unsigned int CU_get_number_of_tests_failed(void)
 289          {
 290   1        return f_run_summary.nTestsFailed;
 291   1      }
 292          
 293          /*------------------------------------------------------------------------*/
 294          unsigned int CU_get_number_of_tests_inactive(void)
 295          {
 296   1        return f_run_summary.nTestsInactive;
 297   1      }
 298          
C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 6   

 299          /*------------------------------------------------------------------------*/
 300          unsigned int CU_get_number_of_asserts(void)
 301          {
 302   1        return f_run_summary.nAsserts;
 303   1      }
 304          
 305          /*------------------------------------------------------------------------*/
 306          unsigned int CU_get_number_of_successes(void)
 307          {
 308   1        return (f_run_summary.nAsserts - f_run_summary.nAssertsFailed);
 309   1      }
 310          
 311          /*------------------------------------------------------------------------*/
 312          unsigned int CU_get_number_of_failures(void)
 313          {
 314   1        return f_run_summary.nAssertsFailed;
 315   1      }
 316          
 317          /*------------------------------------------------------------------------*/
 318          unsigned int CU_get_number_of_failure_records(void)
 319          {
 320   1        return f_run_summary.nFailureRecords;
 321   1      }
 322          
 323          /*------------------------------------------------------------------------*/
 324          double CU_get_elapsed_time(void)
 325          {
 326   1        if (CU_TRUE == f_bTestIsRunning) {
 327   2          return ((double)clock() - (double)f_start_time)/(double)CLOCKS_PER_SEC;
 328   2        }
 329   1        else {
 330   2          return f_run_summary.ElapsedTime;
 331   2        }
 332   1      }
 333          
 334          /*------------------------------------------------------------------------*/
 335          CU_pFailureRecord CU_get_failure_list(void)
 336          {
 337   1        return f_failure_list;
 338   1      }
 339          
 340          /*------------------------------------------------------------------------*/
 341          CU_pRunSummary CU_get_run_summary(void)
 342          {
 343   1        return &f_run_summary;
 344   1      }
 345          
 346          /*------------------------------------------------------------------------*/
 347          CU_ErrorCode CU_run_all_tests(void)
 348          {
 349   1        CU_pTestRegistry pRegistry = CU_get_registry();
 350   1        CU_pSuite pSuite = NULL;
 351   1        CU_ErrorCode result = CUE_SUCCESS;
 352   1        CU_ErrorCode result2;
 353   1      
 354   1        /* Clear results from the previous run */
 355   1        clear_previous_results(&f_run_summary, &f_failure_list);
 356   1      
 357   1        if (NULL == pRegistry) {
 358   2          result = CUE_NOREGISTRY;
 359   2        }
 360   1        else {
C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 7   

 361   2          /* test run is starting - set flag */
 362   2          f_bTestIsRunning = CU_TRUE;
 363   2          f_start_time = clock();
 364   2      
 365   2          pSuite = pRegistry->pSuite;
 366   2          while ((NULL != pSuite) && ((CUE_SUCCESS == result) || (CU_get_error_action() == CUEA_IGNORE))) {
 367   3            result2 = run_single_suite(pSuite, &f_run_summary);
 368   3            result = (CUE_SUCCESS == result) ? result2 : result;  /* result = 1st error encountered */
 369   3            pSuite = pSuite->pNext;
 370   3          }
 371   2      
 372   2          /* test run is complete - clear flag */
 373   2          f_bTestIsRunning = CU_FALSE;
 374   2          f_run_summary.ElapsedTime = ((double)clock() - (double)f_start_time)/(double)CLOCKS_PER_SEC;
 375   2      
 376   2          if (NULL != f_pAllTestsCompleteMessageHandler) {
 377   3           (*f_pAllTestsCompleteMessageHandler)(f_failure_list);
 378   3          }
 379   2        }
 380   1      
 381   1        CU_set_error(result);
 382   1        return result;
 383   1      }
 384          
 385          /*------------------------------------------------------------------------*/
 386          CU_ErrorCode CU_run_suite(CU_pSuite pSuite)
 387          {
 388   1        CU_ErrorCode result = CUE_SUCCESS;
 389   1      
 390   1        /* Clear results from the previous run */
 391   1        clear_previous_results(&f_run_summary, &f_failure_list);
 392   1      
 393   1        if (NULL == pSuite) {
 394   2          result = CUE_NOSUITE;
 395   2        }
 396   1        else {
 397   2          /* test run is starting - set flag */
 398   2          f_bTestIsRunning = CU_TRUE;
 399   2          f_start_time = clock();
 400   2      
 401   2          result = run_single_suite(pSuite, &f_run_summary);
 402   2      
 403   2          /* test run is complete - clear flag */
 404   2          f_bTestIsRunning = CU_FALSE;
 405   2          f_run_summary.ElapsedTime = ((double)clock() - (double)f_start_time)/(double)CLOCKS_PER_SEC;
 406   2      
 407   2          /* run handler for overall completion, if any */
 408   2          if (NULL != f_pAllTestsCompleteMessageHandler) {
 409   3            (*f_pAllTestsCompleteMessageHandler)(f_failure_list);
 410   3          }
 411   2        }
 412   1      
 413   1        CU_set_error(result);
 414   1        return result;
 415   1      }
 416          
 417          /*------------------------------------------------------------------------*/
 418          CU_ErrorCode CU_run_test(CU_pSuite pSuite, CU_pTest pTest)
 419          {
 420   1        CU_ErrorCode result = CUE_SUCCESS;
 421   1        CU_ErrorCode result2;
 422   1      
C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 8   

 423   1        /* Clear results from the previous run */
 424   1        clear_previous_results(&f_run_summary, &f_failure_list);
 425   1      
 426   1        if (NULL == pSuite) {
 427   2          result = CUE_NOSUITE;
 428   2        }
 429   1        else if (NULL == pTest) {
 430   2          result = CUE_NOTEST;
 431   2        }
 432   1        else if (CU_FALSE == pSuite->fActive) {
 433   2          f_run_summary.nSuitesInactive++;
 434   2          if (CU_FALSE != f_failure_on_inactive) {
 435   3            add_failure(&f_failure_list, &f_run_summary, CUF_SuiteInactive,
 436   3                        0, _("Suite inactive"), _("CUnit System"), pSuite, NULL);
 437   3          }
 438   2          result = CUE_SUITE_INACTIVE;
 439   2        }
 440   1        else if ((NULL == pTest->pName) || (NULL == CU_get_test_by_name(pTest->pName, pSuite))) {
 441   2          result = CUE_TEST_NOT_IN_SUITE;
 442   2        }
 443   1        else {
 444   2          /* test run is starting - set flag */
 445   2          f_bTestIsRunning = CU_TRUE;
 446   2          f_start_time = clock();
 447   2      
 448   2          f_pCurTest = NULL;
 449   2          f_pCurSuite = pSuite;
 450   2      
 451   2          pSuite->uiNumberOfTestsFailed = 0;
 452   2          pSuite->uiNumberOfTestsSuccess = 0;
 453   2      
 454   2          /* run handler for suite start, if any */
 455   2          if (NULL != f_pSuiteStartMessageHandler) {
 456   3            (*f_pSuiteStartMessageHandler)(pSuite);
 457   3          }
 458   2      
 459   2          /* run the suite initialization function, if any */
 460   2          if ((NULL != pSuite->pInitializeFunc) && (0 != (*pSuite->pInitializeFunc)())) {
 461   3            /* init function had an error - call handler, if any */
 462   3            if (NULL != f_pSuiteInitFailureMessageHandler) {
 463   4              (*f_pSuiteInitFailureMessageHandler)(pSuite);
 464   4            }
 465   3            f_run_summary.nSuitesFailed++;
 466   3            add_failure(&f_failure_list, &f_run_summary, CUF_SuiteInitFailed, 0,
 467   3                        _("Suite Initialization failed - Suite Skipped"),
 468   3                        _("CUnit System"), pSuite, NULL);
 469   3            result = CUE_SINIT_FAILED;
 470   3          }
 471   2          /* reach here if no suite initialization, or if it succeeded */
 472   2          else {
 473   3            result2 = run_single_test(pTest, &f_run_summary);
 474   3            result = (CUE_SUCCESS == result) ? result2 : result;
 475   3      
 476   3            /* run the suite cleanup function, if any */
 477   3            if ((NULL != pSuite->pCleanupFunc) && (0 != (*pSuite->pCleanupFunc)())) {
 478   4              /* cleanup function had an error - call handler, if any */
 479   4              if (NULL != f_pSuiteCleanupFailureMessageHandler) {
 480   5                (*f_pSuiteCleanupFailureMessageHandler)(pSuite);
 481   5              }
 482   4              f_run_summary.nSuitesFailed++;
 483   4              add_failure(&f_failure_list, &f_run_summary, CUF_SuiteCleanupFailed,
 484   4                          0, _("Suite cleanup failed."), _("CUnit System"), pSuite, NULL);
C51 COMPILER V9.55   TESTRUN                                                               08/05/2016 10:37:27 PAGE 9   

 485   4              result = (CUE_SUCCESS == result) ? CUE_SCLEAN_FAILED : result;
 486   4            }
 487   3          }
 488   2      
 489   2          /* run handler for suite completion, if any */
 490   2          if (NULL != f_pSuiteCompleteMessageHandler) {
 491   3            //(*f_pSuiteCompleteMessageHandler)(pSuite, NULL);
 492   3          }
 493   2      
 494   2          /* test run is complete - clear flag */
 495   2          f_bTestIsRunning = CU_FALSE;
 496   2          f_run_summary.ElapsedTime = ((double)clock() - (double)f_start_time)/(double)CLOCKS_PER_SEC;
 497   2      
 498   2          /* run handler for overall completion, if any */
 499   2          if (NULL != f_pAllTestsCompleteMessageHandler) {
 500   3            (*f_pAllTestsCompleteMessageHandler)(f_failure_list);
 501   3          }
 502   2      
 503   2          f_pCurSuite = NULL;
 504   2        }
 505   1      
 506   1        CU_set_error(result);
 507   1        return result;
 508   1      }
 509          
 510          /*------------------------------------------------------------------------*/
 511          void CU_clear_previous_results(void)
 512          {
 513   1        clear_previous_results(&f_run_summary, &f_failure_list);
 514   1      }
 515          
 516          /*------------------------------------------------------------------------*/
 517          CU_pSuite CU_get_current_suite(void)
 518          {
 519   1        return f_pCurSuite;
 520   1      }
 521          
 522          /*------------------------------------------------------------------------*/
 523          CU_pTest CU_get_current_test(void)
 524          {
 525   1        return f_pCurTest;
 526   1      }
 527          
 528          /*------------------------------------------------------------------------*/
 529          CU_BOOL CU_is_test_running(void)
 530          {
 531   1        return f_bTestIsRunning;
 532   1      }
 533          
 534          /*------------------------------------------------------------------------*/
 535          CU_EXPORT void CU_set_fail_on_inactive(CU_BOOL new_inactive)
 536          {
 537   1        f_failure_on_inactive = new_inactive;
 538   1      }
 539          
 540          /*------------------------------------------------------------------------*/

C51 FATAL-ERROR -
  ACTION:  GENERATING INTERMEDIATE CODE
  ERROR:   FUNCTION 'CU_get_run_results_string' (LINE 591, T=400,L=36,l=1): TOO COMPLEX
C51 TERMINATED.
